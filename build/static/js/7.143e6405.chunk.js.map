{"version":3,"sources":["dataProvider/graphql.ts"],"names":["getGqlResource","resource","Error","customBuildQuery","introspectionResults","buildQuery","buildQueryFactory","type","params","DELETE","query","gql","variables","id","parseResponse","data","a","buildApolloClient","clientOptions","uri","introspection","operationNames","name","dataProvider"],"mappings":"2MAYMA,EAAiB,SAACC,GACpB,OAAQA,GACJ,IAAK,YACD,MAAO,WAEX,IAAK,aACD,MAAO,WAEX,IAAK,WACD,MAAO,UAEX,IAAK,WACD,MAAO,UAEX,IAAK,UACD,MAAO,SAEX,IAAK,WACD,MAAO,UAEX,IAAK,QACD,MAAO,OAEX,IAAK,QACD,MAAO,OAEX,IAAK,WACD,MAAO,UAEX,QACI,MAAM,IAAIC,MAAJ,2BAA8BD,MAe1CE,EAAmB,SACrBC,GAEA,IAAMC,EAAaC,YAAkBF,GAErC,OAAO,SAACG,EAAMN,EAAUO,GACpB,OAAID,IAASE,IACF,CACHC,MAAOC,kBAAF,kHAAuBV,EAChBA,GAEZW,UAAW,CAAEC,GAAIL,EAAOK,IACxBC,cAAe,YACX,GADiD,EAAnCC,KACL,SAAD,OAAUd,IACd,MAAO,CAAEc,KAAM,CAAEF,GAAIL,EAAOK,KAGhC,MAAM,IAAIX,MAAJ,2BAA8BD,MAKzCI,EAAWE,EAAMN,EAAUO,KAI1C,gCAAe,4BAAAQ,EAAA,sEACgBC,YAAkB,CACzCC,cAAe,CACXC,IAAK,iCAETC,cAAe,CACXC,eAAe,eACVZ,KAAS,SAACR,GAAD,sBACGA,EAASqB,UAG9BjB,WAAYF,IAXL,cACLoB,EADK,0BAcJ,SAAChB,EAAcN,EAAkBO,GACpC,OAAOe,EAAahB,EAAMP,EAAeC,GAAWO,MAf7C","file":"static/js/7.143e6405.chunk.js","sourcesContent":["import { ApolloQueryResult } from 'apollo-client';\nimport buildApolloClient, {\n    buildQuery as buildQueryFactory,\n} from 'ra-data-graphql-simple';\nimport { DELETE, LegacyDataProvider } from 'react-admin';\nimport gql from 'graphql-tag';\nimport {\n    IntrospectionField,\n    IntrospectionSchema,\n    IntrospectionType,\n} from 'graphql';\n\nconst getGqlResource = (resource: string) => {\n    switch (resource) {\n        case 'customers':\n            return 'Customer';\n\n        case 'categories':\n            return 'Category';\n\n        case 'commands':\n            return 'Command';\n\n        case 'products':\n            return 'Product';\n\n        case 'reviews':\n            return 'Review';\n\n        case 'invoices':\n            return 'Invoice';\n            \n        case 'mails':\n            return 'Mail';  \n            \n        case 'junks':\n            return 'Junk';  \n            \n        case 'projects':\n            return 'Project';  \n\n        default:\n            throw new Error(`Unknown resource ${resource}`);\n    }\n};\n\ntype IntrospectionResource = IntrospectionType & {\n    [key: string]: IntrospectionField;\n};\n\ninterface IntrospectionResults {\n    types: IntrospectionType[];\n    queries: IntrospectionField[];\n    resources: IntrospectionResource[];\n    schema: IntrospectionSchema;\n}\n\nconst customBuildQuery = (\n    introspectionResults: IntrospectionResults\n): LegacyDataProvider => {\n    const buildQuery = buildQueryFactory(introspectionResults);\n\n    return (type, resource, params) => {\n        if (type === DELETE) {\n            return {\n                query: gql`mutation remove${resource}($id: ID!) {\n                    remove${resource}(id: $id)\n                }`,\n                variables: { id: params.id },\n                parseResponse: ({ data }: ApolloQueryResult<any>) => {\n                    if (data[`remove${resource}`]) {\n                        return { data: { id: params.id } };\n                    }\n\n                    throw new Error(`Could not delete ${resource}`);\n                },\n            };\n        }\n\n        return buildQuery(type, resource, params);\n    };\n};\n\nexport default async () => {\n    const dataProvider = await buildApolloClient({\n        clientOptions: {\n            uri: 'http://localhost:4000/graphql',\n        },\n        introspection: {\n            operationNames: {\n                [DELETE]: (resource: IntrospectionType) =>\n                    `remove${resource.name}`,\n            },\n        },\n        buildQuery: customBuildQuery,\n    });\n\n    return (type: string, resource: string, params: any) => {\n        return dataProvider(type, getGqlResource(resource), params);\n    };\n};\n"],"sourceRoot":""}